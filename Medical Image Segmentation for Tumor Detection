import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, concatenate
from tensorflow.keras.optimizers import Adam
import numpy as np
import cv2

# Step 1: Define a simple U-Net model for image segmentation
def unet(input_size=(256, 256, 1)):
    inputs = Input(input_size)
    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same')(inputs)
    pool1 = MaxPooling2D((2, 2))(conv1)
    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same')(pool1)
    pool2 = MaxPooling2D((2, 2))(conv2)
    up1 = UpSampling2D((2, 2))(pool2)
    concat1 = concatenate([conv2, up1], axis=3)
    conv3 = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(concat1)
    
    model = Model(inputs, conv3)
    model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Step 2: Load your MRI images and masks (For simplicity, we'll simulate random images and masks)
X_train = np.random.rand(10, 256, 256, 1)  # Random MRI images
y_train = np.random.randint(0, 2, (10, 256, 256, 1))  # Random tumor masks

# Step 3: Train the model
model = unet()
model.fit(X_train, y_train, epochs=10, batch_size=2)

# Step 4: Predict on new images
X_test = np.random.rand(1, 256, 256, 1)
predictions = model.predict(X_test)

# Display results
import matplotlib.pyplot as plt
plt.imshow(predictions[0, :, :, 0], cmap='gray')
plt.show()
